{"version":3,"file":"components-ConnectWalletList-ConnectWalletList-stories.ea08a231.iframe.bundle.js","mappings":";;;;;;AAWA;AAGA;AAMA;;;;;;;;AAQA;;;;;;AAMA;;AAYA;;AAEA;;;AAgBA;;AAIA;;;;AAMA;;;;;;;;;;;;;;AAmBA;;AAEA;;AAYA;;;;;;;;;;;;;;;;AA6BA;;;AC2CA","sources":["webpack://@cardano-foundation/cardano-connect-with-wallet/./src/components/ConnectWalletList/StyledListElements.tsx","webpack://@cardano-foundation/cardano-connect-with-wallet/./src/components/ConnectWalletList/ConnectWalletList.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { MenuItemStyle, CustomStyle } from '../../types';\n\nexport const Menu = styled('div').withConfig({\n  shouldForwardProp: (prop) => !['customCSS'].includes(prop),\n})<CustomStyle>`\n  font-family: sans-serif;\n  min-width: 160px;\n  max-width: 240px;\n  width: fit-content;\n  z-index: 1;\n  ${(props) => props.customCSS}\n`;\n\nexport const MenuItem = styled('span').withConfig({\n  shouldForwardProp: (prop) =>\n    !['primaryColor', 'primaryColorLight', 'borderRadius', 'gap'].includes(\n      prop\n    ),\n})<MenuItemStyle>`\n  color: ${(props) => props.primaryColor};\n  padding: 12px 16px;\n  text-decoration: none;\n  display: flex;\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  align-items: center;\n  cursor: pointer;\n  border-color: ${(props) => props.primaryColor};\n  border-style: solid;\n  border-width: 1px;\n  border-bottom: none;\n  background-color: white;\n\n  ${(props) =>\n    props.gap && props.gap > 0\n      ? `margin-bottom: ${props.gap}px;\n         border-bottom: 1px solid ${props.primaryColor};`\n      : `&:first-child {\n          border-bottom: none;\n        }\n        \n        &:last-child {\n          border: 1px solid ${props.primaryColor};\n        }`}\n\n  ${(props) => props.borderRadius && `border-radius: ${props.borderRadius}px;`}\n\n  ${(props) =>\n    props.borderRadius &&\n    (!props.gap || props.gap < 1) &&\n    `border-radius: unset;\n      &:first-child {\n    border-top-left-radius: ${props.borderRadius}px;\n    border-top-right-radius: ${props.borderRadius}px;\n      }\n      \n      &:last-child {\n    border-bottom-left-radius: ${props.borderRadius}px;\n    border-bottom-right-radius: ${props.borderRadius}px;\n      }\n    `}  \n\n  &:hover {\n    background-color: ${(props) => props.primaryColorLight};\n  }\n`;\n\nexport const MenuItemIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\nexport const DesktopMenuItem = styled('span').withConfig({\n  shouldForwardProp: (prop) =>\n    !['primaryColor', 'primaryColorLight', 'borderRadius', 'gap'].includes(\n      prop\n    ),\n})<MenuItemStyle>`\n  color: #333;\n  position: relative;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n  border-color: #333;\n  border-style: solid;\n  border-width: 1px;\n  background-color: #e3e3e3;\n  overflow: hidden;\n  border-bottom: none;\n\n  ${(props) => props.borderRadius && `border-radius: ${props.borderRadius}px;`}\n\n  ${(props) =>\n    props.gap && props.gap > 0\n      ? `margin-bottom: ${props.gap}px;\n         border-bottom: 1px solid #333;`\n      : `&:first-child {\n          border-bottom: none;\n        }\n        \n        &:last-child {\n          border-bottom: 1px solid #333;\n        }`}\n\n  ${(props) =>\n    props.borderRadius &&\n    (!props.gap || props.gap < 1) &&\n    `border-radius: unset;\n      &:first-child {\n    border-top-left-radius: ${props.borderRadius}px;\n    border-top-right-radius: ${props.borderRadius}px;\n      }\n      \n      &:last-child {\n    border-bottom-left-radius: ${props.borderRadius}px;\n    border-bottom-right-radius: ${props.borderRadius}px;\n      }\n    `}  \n\n  & > span {\n    text-transform: uppercase;\n    font-size: 0.5rem;\n    position: absolute;\n    right: 0;\n    width: 100%;\n    padding: 3px;\n    background: #777;\n    color: #fff;\n    text-align: center;\n    transform: rotate(-35deg);\n    translate: 25%;\n  }\n\n  & ${MenuItemIcon} {\n    filter: brightness(0);\n  }\n`;\n","import React from 'react';\nimport { useCardano } from '../../hooks';\nimport { ConnectWalletListProps } from '../../types';\nimport {\n  getWalletIcon,\n  isWalletInstalled,\n  UnavailableWalletVisibility,\n  checkIsMobile,\n  estimateAvailableWallets,\n  WalletExtensionNotFoundError,\n  capitalize,\n  formatSupportedWallets,\n} from '@cardano-foundation/cardano-connect-with-wallet-core';\nimport Color from 'color';\nimport {\n  DesktopMenuItem,\n  Menu,\n  MenuItem,\n  MenuItemIcon,\n} from './StyledListElements';\n\nconst ConnectWalletList = ({\n  supportedWallets = ['Flint', 'Nami', 'Eternl', 'Yoroi', 'NuFi', 'Lace'],\n  primaryColor,\n  borderRadius,\n  gap,\n  showUnavailableWallets = UnavailableWalletVisibility.SHOW_UNAVAILABLE_ON_MOBILE,\n  alwaysVisibleWallets = [],\n  customCSS,\n  limitNetwork,\n  onConnect,\n  onConnectError,\n}: ConnectWalletListProps) => {\n  const { connect, installedExtensions } = useCardano({\n    limitNetwork: limitNetwork,\n  });\n\n  const mobileWallets = ['flint'];\n  const isMobile = checkIsMobile();\n  const availableWallets = estimateAvailableWallets(\n    supportedWallets,\n    showUnavailableWallets,\n    alwaysVisibleWallets,\n    installedExtensions\n  );\n\n  const connectWallet = async (walletName: string) => {\n    const onSuccess = () => {\n      if (typeof onConnect === 'function') {\n        onConnect(walletName);\n      }\n    };\n\n    const onError = (error: Error) => {\n      if (typeof onConnectError === 'function') {\n        onConnectError(walletName, error);\n      } else {\n        if (error instanceof WalletExtensionNotFoundError) {\n          const chromeStoreUrl = 'https://chrome.google.com/webstore/detail/';\n          if (walletName.toLowerCase() === 'nami') {\n            window.open(\n              `${chromeStoreUrl}nami/lpfcbjknijpeeillifnkikgncikgfhdo`\n            );\n          } else if (walletName.toLowerCase() === 'flint') {\n            window.open(\n              `${chromeStoreUrl}flint-wallet/hnhobjmcibchnmglfbldbfabcgaknlkj`\n            );\n          } else if (walletName.toLowerCase() === 'typhon') {\n            window.open(\n              `${chromeStoreUrl}typhon-wallet/kfdniefadaanbjodldohaedphafoffoh`\n            );\n          } else if (walletName.toLowerCase() === 'yoroi') {\n            window.open(\n              `${chromeStoreUrl}yoroi/ffnbelfdoeiohenkjibnmadjiehjhajb`\n            );\n          } else if (walletName.toLowerCase() === 'eternl') {\n            window.open(\n              `${chromeStoreUrl}eternl/kmhcihpebfmpgmihbkipmjlmmioameka`\n            );\n          } else if (walletName.toLowerCase() === 'gerowallet') {\n            window.open(\n              `${chromeStoreUrl}gerowallet/bgpipimickeadkjlklgciifhnalhdjhe`\n            );\n          } else if (walletName.toLowerCase() === 'nufi') {\n            window.open(\n              `${chromeStoreUrl}nufi/gpnihlnnodeiiaakbikldcihojploeca`\n            );\n          } else if (walletName.toLowerCase() === 'lace') {\n            window.open(\n              `${chromeStoreUrl}lace/gafhhkghbfjjkeiendhlofajokpaflmk`\n            );\n          } else {\n            alert(\n              `Please make sure you are using a modern browser and the ${walletName} browser extension has been installed.`\n            );\n          }\n        } else {\n          alert(`Something went wrong. Please try again later.`);\n        }\n      }\n    };\n\n    connect(walletName, onSuccess, onError);\n  };\n\n  const connectMobileWallet = async (walletName: string) => {\n    if (!isMobile) {\n      connectWallet(walletName);\n    }\n\n    if (!mobileWallets.includes(walletName.toLowerCase())) {\n      return;\n    }\n\n    if (walletName.toLowerCase() === 'flint') {\n      if (isWalletInstalled('flint')) {\n        connectWallet(walletName);\n      } else {\n        window.location.href = `https://flint-wallet.app.link/browse?dappUrl=${encodeURIComponent(\n          window.location.href\n        )}`;\n      }\n    }\n  };\n\n  const themeColorObject = primaryColor\n    ? Color(primaryColor)\n    : Color('#0538AF');\n\n  return (\n    <Menu customCSS={customCSS || ''} data-testid=\"connect-wallet-list\">\n      {availableWallets ? (\n        availableWallets.map((availableWallet) => {\n          if (\n            isMobile &&\n            !mobileWallets.includes(availableWallet.toLowerCase())\n          ) {\n            return (\n              <DesktopMenuItem\n                primaryColor={themeColorObject.hex()}\n                primaryColorLight={themeColorObject\n                  .mix(Color('white'), 0.9)\n                  .hex()}\n                borderRadius={borderRadius || 0}\n                gap={gap || 0}\n                key={availableWallet}\n              >\n                <MenuItemIcon src={getWalletIcon(availableWallet)} />\n                {capitalize(availableWallet)}\n                <span>Desktop Only</span>\n              </DesktopMenuItem>\n            );\n          }\n\n          return (\n            <MenuItem\n              primaryColor={themeColorObject.hex()}\n              primaryColorLight={themeColorObject\n                .mix(Color('white'), 0.9)\n                .hex()}\n              borderRadius={borderRadius || 0}\n              gap={gap || 0}\n              key={availableWallet}\n              onClick={() => connectMobileWallet(availableWallet)}\n            >\n              <MenuItemIcon src={getWalletIcon(availableWallet)}></MenuItemIcon>\n              {capitalize(availableWallet)}\n            </MenuItem>\n          );\n        })\n      ) : (\n        <span>{`Please install a wallet browser extension (${formatSupportedWallets(\n          supportedWallets\n        )} are supported)`}</span>\n      )}\n    </Menu>\n  );\n};\n\nexport default ConnectWalletList;\n"],"names":[],"sourceRoot":""}